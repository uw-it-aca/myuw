---
name: Build, Test and Deploy

env:
  RELEASE_NAME: myuw
  DJANGO_APP: myuw
  GCR_TAG_BASE: gcr.io/uwit-mci-axdd

on:
  push:
    branches: [master, qa, develop, feature/vue, feature/github-actions, vue/github-actions]
  pull_request:
    branches: [master, qa, develop, feature/vue, feature/github-actions, vue/github-actions]
    types: [opened, reopened, synchronize]

jobs:
  environment:
    runs-on: ubuntu-18.04

    steps:
      - name: Global Environment
        id: global-env
        run: |
          export FULL_COMMIT_HASH="${{ github.sha }}"
          export COMMIT_HASH="${FULL_COMMIT_HASH:0:7}"
          echo "::set-output name=commit_hash::${COMMIT_HASH}"
    outputs:
      commit_hash: ${{ steps.global-env.outputs.commit_hash }}

  build:
    needs: environment

    runs-on: ubuntu-18.04

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set up Environment
        run: |
          export COMMIT_HASH="${{ needs.environment.outputs.commit_hash }}"
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.RELEASE_NAME }}:$COMMIT_HASH" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-$(echo ${{ hashFiles('Dockerfile') }} | head -c 16)
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build App Image
        uses: docker/build-push-action@v2
        with:
          target: app-container
          tags: ${{ env.IMAGE_TAG }}
          push: false
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build Test Image
        uses: docker/build-push-action@v2
        with:
          target: app-test-container
          tags: app-test-container
          push: false
          load: true
  
  test:
    needs: build
    runs-on: ubuntu-18.04
    env:
      COMPOSE_DOCKER_CLI_BUILD=1
    strategy:
      matrix:
        test-container:
          - python-tests
          - eslint
          - jest
          - cypress

    steps:
      - name: Run Tests in Image
        id: tests
        shell: bash
        run: docker-compose -f docker/test.yml run ${{ matrix['test-container'] }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6

      - name: Record Test Results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          gem install coveralls-lcov
          python -m pip install --upgrade pip coverage coveralls==2.2.0
          cp /tmp/myuw/.coverage.* /tmp/myuw/lcov.info .
          coverage combine
          coveralls-lcov -v -n lcov.info > js-coverage.json
          coveralls --merge=js-coverage.json

      - name: Push Image to GCR
        if: github.event_name == 'push'
        env:
          GCR_TAG: ${{ env.GCR_TAG_BASE }}/${{ env.IMAGE_TAG }}
        run: |
          echo "${{ secrets.GCP_JSON_KEY }}" | base64 -d | docker login --username=_json_key --password-stdin https://gcr.io
          docker tag "$IMAGE_TAG" "$GCR_TAG"
          docker push "$GCR_TAG"

  deploy:
    if: github.event_name == 'push'

    needs: [environment, build]

    runs-on: ubuntu-18.04

    env:
      GH_AUTH_TOKEN: ${{ secrets.GH_AUTH_TOKEN }}
      GIT_REPO_SLUG: ${{ github.repository }}
      BUILD_NUMBER: ${{ github.run_id }}
      BUILD_WEB_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      DEPLOY_APP_BASE: https://raw.githubusercontent.com/uw-it-aca/gcp-app-deploy
      DEPLOY_APP_BRANCH: master

    steps:
      - name: Set up Environment
        run: |
          export COMMIT_HASH="${{ needs.environment.outputs.commit_hash }}"
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.RELEASE_NAME }}:$COMMIT_HASH" >> $GITHUB_ENV
          echo "GIT_REPO_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Deploy Production
        if: env.GIT_REPO_BRANCH == 'main' || env.GIT_REPO_BRANCH == 'master'
        run: curl -Ls ${DEPLOY_APP_BASE}/${DEPLOY_APP_BRANCH}/deploy.sh | bash

      - name: Deploy Test Branch
        if: env.GIT_REPO_BRANCH == 'qa'
        run: curl -Ls ${DEPLOY_APP_BASE}/${DEPLOY_APP_BRANCH}/deploy.sh | bash

      - name: Deploy Develop Branch
        if: env.GIT_REPO_BRANCH == 'develop'
        env:
          APP_INSTANCE: dev
        run: curl -Ls ${DEPLOY_APP_BASE}/${DEPLOY_APP_BRANCH}/deploy.sh | bash

      - name: Deploy feature/vue Branch
        if: env.GIT_REPO_BRANCH == 'feature/vue'
        env:
          APP_INSTANCE: vue
        run: curl -Ls ${DEPLOY_APP_BASE}/${DEPLOY_APP_BRANCH}/deploy.sh | bash

      - name: Review Deploy Config
        if: env.GIT_REPO_BRANCH == 'feature/github-actions'
        env:
          DRY_RUN: true
          APP_INSTANCE: dev
        run: curl -Ls ${DEPLOY_APP_BASE}/${DEPLOY_APP_BRANCH}/deploy.sh | bash
